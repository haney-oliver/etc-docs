{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"etc","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#deploying-mkdocs","title":"Deploying mkdocs","text":"<p>Run the following: <pre><code>mkdocs gh-deploy --strict --force\n</code></pre></p>"},{"location":"applications/","title":"Applications","text":""},{"location":"applications/#setup","title":"Setup","text":"<p>Install the application repositories:</p> <ul> <li>api-storytime</li> </ul>"},{"location":"applications/#create-application-virtual-environments","title":"Create application virtual environments","text":"<pre><code>brew install pyenv\nbrew install pyenv-virtualenv\n</code></pre> <p>Add the following lines to your ~/.zshrc</p> <pre><code>export PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\nexport PIPENV_PYTHON=\"$PYENV_ROOT/shims/python\"\nexport PYENV_VIRTUALENV_DISABLE_PROMPT=1\nplugin=(\npyenv\n)\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre> <p>Then activate your virtual environment and bind it to your working directory:</p> <pre><code>source ~/.zshrc\n\npyenv install -v 3.10.5\npyenv virtualenv 3.10.5 &lt;APP_NAME&gt;\n\n# Automatically select the correct venv when you're in this directory:\ncd &lt;APP_NAME&gt;\npyenv local &lt;APP_NAME&gt;\n\n# Verify that your env is setup correctly\npyenv versions\npython --version\n\n# If the &lt;APP_NAME&gt; venv is not selected, run the following\npyenv activate &lt;APP_NAME&gt;\n\n# Install dev dependencies if you intend to edit this script\npip install flake8 black\n\n# Install project dependencies\npip install -r requirements.txt\n</code></pre> How to configure VS Code to use your new virtualenv <p>Press <code>\u2318</code> + <code>Shift</code> + <code>p</code></p> <p>Select <code>Python: Select Interpreter</code></p> <p>Select <code>Enter interpreter path...</code></p> <p>Then enter <code>~/.pyenv/versions/3.10.5/envs/&lt;APP_NAME&gt;/bin/python</code></p> <p>All of your dependencies should be supported by python interpreter.</p> <pre><code># Run in virtualenv\nuvicorn app:app --reload\n\n# Run in Docker container\ndocker build -t &lt;APP_NAME&gt; .\ndocker run -it &lt;APP_NAME&gt; -p 8080:8080\n\n# Push to registry\ndocker tag &lt;APP_NAME&gt;:latest registry.everythingisacomputer.io/&lt;APP_NAME&gt;:latest\ndocker push registry.everythingisacomputer.io/&lt;APP_NAME&gt;:latest\n</code></pre>"},{"location":"applications/storytime/architecture/","title":"Architecture","text":"<pre><code>graph TB\n  A[frontend-storytime] --&gt;|HTTP Request| B{/public/v1/offer};\n  B --&gt;|Write offer details| C[(Database)]\n  B --&gt;|API Token| A\n  A ---|HTTP w/ Auth| D{/admin/v1/story};\n  D --- E[OpenAI API]\n  D --&gt; F[\\ETC Bucket/]\n  D --- G{storytime-diffuser};\n  G --&gt; F\n  D --&gt;|Update order fulfillment| C</code></pre>"},{"location":"applications/storytime/architecture/#api-storytime","title":"api-storytime","text":"<p>Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.</p> <p>Base URLs:</p> <ul> <li>/api-storytime</li> </ul>"},{"location":"applications/storytime/architecture/#authentication","title":"Authentication","text":"<ul> <li>HTTP Authentication, scheme: bearer </li> </ul>"},{"location":"applications/storytime/architecture/#fastapi-default","title":"Default","text":""},{"location":"applications/storytime/architecture/#generate-story","title":"Generate Story","text":"<p>Code samples</p> bashjsrubypyjavago <pre><code># You can also use wget\ncurl -X POST /api-storytime/admin/v1/story \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Bearer {access-token}'\n</code></pre> <pre><code>const inputBody = '{\n  \"character\": \"string\",\n  \"genre\": \"string\",\n  \"setting\": \"string\",\n  \"interests\": [\n    \"string\"\n  ],\n  \"order_id\": \"string\"\n}';\nconst headers = {\n'Content-Type':'application/json',\n'Accept':'application/json',\n'Authorization':'Bearer {access-token}'\n};\nfetch('/api-storytime/admin/v1/story',\n{\nmethod: 'POST',\nbody: inputBody,\nheaders: headers\n})\n.then(function(res) {\nreturn res.json();\n}).then(function(body) {\nconsole.log(body);\n});\n</code></pre> <pre><code>require 'rest-client'\nrequire 'json'\nheaders = {\n'Content-Type' =&gt; 'application/json',\n'Accept' =&gt; 'application/json',\n'Authorization' =&gt; 'Bearer {access-token}'\n}\nresult = RestClient.post '/api-storytime/admin/v1/story',\nparams: {\n}, headers: headers\np JSON.parse(result)\n</code></pre> <pre><code>import requests\nheaders = {\n'Content-Type': 'application/json',\n'Accept': 'application/json',\n'Authorization': 'Bearer {access-token}'\n}\nr = requests.post('/api-storytime/admin/v1/story', headers = headers)\nprint(r.json())\n</code></pre> <pre><code>URL obj = new URL(\"/api-storytime/admin/v1/story\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\nnew InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\nresponse.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n</code></pre> <pre><code>package main\nimport (\n\"bytes\"\n\"net/http\"\n)\nfunc main() {\nheaders := map[string][]string{\n\"Content-Type\": []string{\"application/json\"},\n\"Accept\": []string{\"application/json\"},\n\"Authorization\": []string{\"Bearer {access-token}\"},\n}\ndata := bytes.NewBuffer([]byte{jsonReq})\nreq, err := http.NewRequest(\"POST\", \"/api-storytime/admin/v1/story\", data)\nreq.Header = headers\nclient := &amp;http.Client{}\nresp, err := client.Do(req)\n// ...\n}\n</code></pre> <p><code>POST /admin/v1/story</code></p> <p>Body parameter</p> <pre><code>{\n\"character\": \"string\",\n\"genre\": \"string\",\n\"setting\": \"string\",\n\"interests\": [\n\"string\"\n],\n\"order_id\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#generate-story-parameters","title":"Parameters","text":"Name In Type Required Description body body StoryRequest true none <p>Example responses</p> <p>200 Response</p> <pre><code>null\n</code></pre>"},{"location":"applications/storytime/architecture/#generate-story-responses","title":"Responses","text":"Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError"},{"location":"applications/storytime/architecture/#generate-story-responseschema","title":"Response Schema","text":"To perform this operation, you must be authenticated by means of one of the following methods: HTTPBearer"},{"location":"applications/storytime/architecture/#healthcheck","title":"Healthcheck","text":"<p>Code samples</p> bashjsrubypyjavago <pre><code># You can also use wget\ncurl -X GET /api-storytime/public/v1/healthz \\\n-H 'Accept: application/json'\n</code></pre> <pre><code>const headers = {\n'Accept':'application/json'\n};\nfetch('/api-storytime/public/v1/healthz',\n{\nmethod: 'GET',\nheaders: headers\n})\n.then(function(res) {\nreturn res.json();\n}).then(function(body) {\nconsole.log(body);\n});\n</code></pre> <pre><code>require 'rest-client'\nrequire 'json'\nheaders = {\n'Accept' =&gt; 'application/json'\n}\nresult = RestClient.get '/api-storytime/public/v1/healthz',\nparams: {\n}, headers: headers\np JSON.parse(result)\n</code></pre> <pre><code>import requests\nheaders = {\n'Accept': 'application/json'\n}\nr = requests.get('/api-storytime/public/v1/healthz', headers = headers)\nprint(r.json())\n</code></pre> <pre><code>URL obj = new URL(\"/api-storytime/public/v1/healthz\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"GET\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\nnew InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\nresponse.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n</code></pre> <pre><code>package main\nimport (\n\"bytes\"\n\"net/http\"\n)\nfunc main() {\nheaders := map[string][]string{\n\"Accept\": []string{\"application/json\"},\n}\ndata := bytes.NewBuffer([]byte{jsonReq})\nreq, err := http.NewRequest(\"GET\", \"/api-storytime/public/v1/healthz\", data)\nreq.Header = headers\nclient := &amp;http.Client{}\nresp, err := client.Do(req)\n// ...\n}\n</code></pre> <p><code>GET /public/v1/healthz</code></p> <p>Example responses</p> <p>200 Response</p> <pre><code>{\n\"ok\": true,\n\"message\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#healthcheck-responses","title":"Responses","text":"Status Meaning Description Schema 200 OK Successful Response HealthcheckResponse  This operation does not require authentication"},{"location":"applications/storytime/architecture/#process-order","title":"Process Order","text":"<p>Code samples</p> bashjsrubypythonjavago <pre><code># You can also use wget\ncurl -X POST /api-storytime/public/v1/order \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json'\n</code></pre> <pre><code>const inputBody = '{\n  \"email\": \"string\",\n  \"amount\": 0,\n  \"billing_address\": {\n    \"street_address\": \"string\",\n    \"state\": \"string\",\n    \"zip_code\": \"string\",\n    \"city\": \"string\"\n  },\n  \"credit_card\": {\n    \"number\": \"string\",\n    \"expiration_month\": \"string\",\n    \"expiration_year\": \"string\",\n    \"security_code\": \"string\",\n    \"name_on_card\": \"string\"\n  }\n}';\nconst headers = {\n'Content-Type':'application/json',\n'Accept':'application/json'\n};\nfetch('/api-storytime/public/v1/order',\n{\nmethod: 'POST',\nbody: inputBody,\nheaders: headers\n})\n.then(function(res) {\nreturn res.json();\n}).then(function(body) {\nconsole.log(body);\n});\n</code></pre> <pre><code>require 'rest-client'\nrequire 'json'\nheaders = {\n'Content-Type' =&gt; 'application/json',\n'Accept' =&gt; 'application/json'\n}\nresult = RestClient.post '/api-storytime/public/v1/order',\nparams: {\n}, headers: headers\np JSON.parse(result)\n</code></pre> <pre><code>import requests\nheaders = {\n'Content-Type': 'application/json',\n'Accept': 'application/json'\n}\nr = requests.post('/api-storytime/public/v1/order', headers = headers)\nprint(r.json())\n</code></pre> <pre><code>URL obj = new URL(\"/api-storytime/public/v1/order\");\nHttpURLConnection con = (HttpURLConnection) obj.openConnection();\ncon.setRequestMethod(\"POST\");\nint responseCode = con.getResponseCode();\nBufferedReader in = new BufferedReader(\nnew InputStreamReader(con.getInputStream()));\nString inputLine;\nStringBuffer response = new StringBuffer();\nwhile ((inputLine = in.readLine()) != null) {\nresponse.append(inputLine);\n}\nin.close();\nSystem.out.println(response.toString());\n</code></pre> <pre><code>package main\nimport (\n\"bytes\"\n\"net/http\"\n)\nfunc main() {\nheaders := map[string][]string{\n\"Content-Type\": []string{\"application/json\"},\n\"Accept\": []string{\"application/json\"},\n}\ndata := bytes.NewBuffer([]byte{jsonReq})\nreq, err := http.NewRequest(\"POST\", \"/api-storytime/public/v1/order\", data)\nreq.Header = headers\nclient := &amp;http.Client{}\nresp, err := client.Do(req)\n// ...\n}\n</code></pre> <p><code>POST /public/v1/order</code></p> <p>Body parameter</p> <pre><code>{\n\"email\": \"string\",\n\"amount\": 0,\n\"billing_address\": {\n\"street_address\": \"string\",\n\"state\": \"string\",\n\"zip_code\": \"string\",\n\"city\": \"string\"\n},\n\"credit_card\": {\n\"number\": \"string\",\n\"expiration_month\": \"string\",\n\"expiration_year\": \"string\",\n\"security_code\": \"string\",\n\"name_on_card\": \"string\"\n}\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#process-order-parameters","title":"Parameters","text":"Name In Type Required Description body body OrderDTO true none <p>Example responses</p> <p>200 Response</p> <pre><code>null\n</code></pre>"},{"location":"applications/storytime/architecture/#process-order-responses","title":"Responses","text":"Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError"},{"location":"applications/storytime/architecture/#process-order-responseschema","title":"Response Schema","text":"This operation does not require authentication"},{"location":"applications/storytime/architecture/#schemas","title":"Schemas","text":""},{"location":"applications/storytime/architecture/#tocS_BillingAddressDTO","title":"BillingAddressDTO","text":"<pre><code>{\n\"street_address\": \"string\",\n\"state\": \"string\",\n\"zip_code\": \"string\",\n\"city\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#billingaddressdto","title":"BillingAddressDTO","text":"<p>Properties</p> Name Type Required Restrictions Description street_address string true none none state string true none none zip_code string true none none city string true none none"},{"location":"applications/storytime/architecture/#tocS_CreditCardDTO","title":"CreditCardDTO","text":"<pre><code>{\n\"number\": \"string\",\n\"expiration_month\": \"string\",\n\"expiration_year\": \"string\",\n\"security_code\": \"string\",\n\"name_on_card\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#creditcarddto","title":"CreditCardDTO","text":"<p>Properties</p> Name Type Required Restrictions Description number string true none none expiration_month string true none none expiration_year string true none none security_code string true none none name_on_card string true none none"},{"location":"applications/storytime/architecture/#tocS_HTTPValidationError","title":"HTTPValidationError","text":"<pre><code>{\n\"detail\": [\n{\n\"loc\": [\n\"string\"\n],\n\"msg\": \"string\",\n\"type\": \"string\"\n}\n]\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#httpvalidationerror","title":"HTTPValidationError","text":"<p>Properties</p> Name Type Required Restrictions Description detail [ValidationError] false none none"},{"location":"applications/storytime/architecture/#tocS_HealthcheckResponse","title":"HealthcheckResponse","text":"<pre><code>{\n\"ok\": true,\n\"message\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#healthcheckresponse","title":"HealthcheckResponse","text":"<p>Properties</p> Name Type Required Restrictions Description ok boolean true none none message string true none none"},{"location":"applications/storytime/architecture/#tocS_OrderDTO","title":"OrderDTO","text":"<pre><code>{\n\"email\": \"string\",\n\"amount\": 0,\n\"billing_address\": {\n\"street_address\": \"string\",\n\"state\": \"string\",\n\"zip_code\": \"string\",\n\"city\": \"string\"\n},\n\"credit_card\": {\n\"number\": \"string\",\n\"expiration_month\": \"string\",\n\"expiration_year\": \"string\",\n\"security_code\": \"string\",\n\"name_on_card\": \"string\"\n}\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#orderdto","title":"OrderDTO","text":"<p>Properties</p> Name Type Required Restrictions Description email string true none none amount integer true none none billing_address BillingAddressDTO true none none credit_card CreditCardDTO true none none"},{"location":"applications/storytime/architecture/#tocS_StoryRequest","title":"StoryRequest","text":"<pre><code>{\n\"character\": \"string\",\n\"genre\": \"string\",\n\"setting\": \"string\",\n\"interests\": [\n\"string\"\n],\n\"order_id\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#storyrequest","title":"StoryRequest","text":"<p>Properties</p> Name Type Required Restrictions Description character string true none none genre string true none none setting string true none none interests [string] false none none order_id string true none none"},{"location":"applications/storytime/architecture/#tocS_ValidationError","title":"ValidationError","text":"<pre><code>{\n\"loc\": [\n\"string\"\n],\n\"msg\": \"string\",\n\"type\": \"string\"\n}\n</code></pre>"},{"location":"applications/storytime/architecture/#validationerror","title":"ValidationError","text":"<p>Properties</p> Name Type Required Restrictions Description loc [anyOf] true none none <p>anyOf</p> Name Type Required Restrictions Description \u00bb anonymous string false none none <p>or</p> Name Type Required Restrictions Description \u00bb anonymous integer false none none <p>continued</p> Name Type Required Restrictions Description msg string true none none type string true none none What does the full workflow look like end to end? <p>User requests an order by sending an POST request to <code>/public/v1/order</code> with the following shape: <pre><code>{\n\"email\": \"asdf@email.com\",\n\"billing_address\": {\n\"street_address\":\"123 Home Rd.\",\n\"city\": \"City\",\n\"zip_code\": \"12345\",\n\"state\": \"FL\"\n},\n\"credit_card\": {\n\"expiration_month\": \"12\",\n\"expiration_year\": \"2027\",\n\"number\": \"4242 4242 4242 4242\",\n\"security_code\": \"111\",\n\"name_on_card\": \"some guy\"\n}\n}\n</code></pre> The <code>order</code> service then idempotently inserts entities into the database in the following order:</p> <ol> <li>User</li> <li>Credit Card</li> <li>Billing Address</li> <li>Order</li> </ol> <p>The <code>order</code> returns a <code>token</code> which is used in the subsequent request as a Bearer token to the <code>/admin/v1/story</code> endpoint. The request to the story endpoint looks like: <pre><code>{\n\"character\": \"Fran\",\n\"interests\": [\n\"Formual-1 racing\",\n\"rock-climbing\",\n\"going to the beach\"\n],\n\"genre\": \"mystery\",\n\"setting\": \"the country\"\n}\n</code></pre> The <code>story</code> service then reaches out to the OpenAI API to generate a children's story, utilizing the user input provided by the request data. That generated story is then cleaned and stored in a linode bucket.</p> <p>In the future, there will be another endpoint that accepts a file uploaded from the user to be used be <code>storytime-diffuser</code> to generate coherent and consistent visuals to accompany the generated narrative. This has yet to be implemented.</p> <p>The <code>story</code> service then updates the state of the order associate with the token provided to fulfilled. Once the order is fulfilled, the user can read/download their story from the user portal.</p>"},{"location":"infrastructure/","title":"Infrastructure","text":""},{"location":"infrastructure/#setup","title":"Setup","text":"<p>All infrastructure is hosted on an Akami/Linode kubernetes cluster. The kube config can be retrieved here. There is a link that will allow you to download the <code>dev-etc-kubeconfig.yaml</code>. Then run the following to complete your setup:</p> <pre><code># Install the Kubernetes CLI and K9s interface\nbrew install kubectl derailed/k9s/k9s\n\n# Configure kubectl to connect to the cluster\nmv ~/Downloads/dev-etc-kubeconfig.yaml ~/.kube/config\n\n# Validate kubectl and k9s are working as expected\nkubectl config use-context lke*****-ctx\nkubectl get nodes\n\nk9s --context lke*****-ctx\n</code></pre> <p>Recommendation</p> <p>It is recommended that you provide the context a more logical name to refer to. This can be done in your <code>~/.kube/config</code>. Edit <code>contexts[&lt;GENERATED_LINODE_CONTEXT&gt;].name</code>: <pre><code>name: dev-etc\n</code></pre> Then you would run the following to refer to the etc cluster context: <pre><code>kubectl config use-context dev-etc\nk9s --context dev-etc\n</code></pre></p>"},{"location":"infrastructure/#infrastructure-repositories","title":"Infrastructure repositories","text":"<p>Then download the necessary infrastructure and application repositories (application repos are listed here):</p> <ul> <li>orb</li> <li>flux</li> </ul> <p>All infrastructure services are managed and deployed by fluxcd Click one of the links below to get more information about a particular service:</p> <ul> <li>cert-manager</li> <li>kube-dashboard</li> <li>kubecost</li> <li>linkerd</li> <li>longhorn</li> <li>mysql</li> <li>registry</li> <li>traefik</li> <li>vault</li> </ul>"},{"location":"infrastructure/cert-manager/","title":"cert-manager","text":"<p>Located here</p>"}]}